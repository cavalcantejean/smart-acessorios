
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Função helper para verificar se o usuário é admin
    // Para produção, considere usar Custom Claims para eficiência e segurança.
    function isAdmin() {
      // Esta função assume que você tem um campo 'isAdmin' no documento do usuário.
      // Em um sistema com Firebase Auth, você verificaria request.auth.token.admin == true (custom claim).
      // Como estamos em um sistema mock, e o request.auth pode ser nulo durante o cadastro,
      // esta função isAdmin() é mais útil para regras de escrita em coleções como 'acessorios'
      // onde se espera que uma ação de admin seja feita por um usuário já autenticado e marcado como admin.
      // Para o contexto de CADASTRO, a lógica de isAdmin não deve ser verificada com esta função,
      // pois o request.auth será nulo.
      return request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.isAdmin == true;
    }

    // Coleção de Usuários (usuarios)
    match /usuarios/{userId} {
      // Dono do perfil pode ler e deletar seu próprio perfil.
      allow read, delete: if request.auth != null && request.auth.uid == userId;

      // Dono do perfil pode atualizar seu próprio perfil, mas não pode se tornar admin
      // a menos que um admin faça essa alteração (o que seria uma regra separada ou função de admin).
      allow update: if request.auth != null && request.auth.uid == userId &&
                       (request.resource.data.isAdmin == resource.data.isAdmin || resource.data.isAdmin == false);
                       // A regra acima significa: ou o campo isAdmin não mudou, ou ele está sendo explicitamente definido como false.
                       // Para um admin mudar o status de outro usuário, seria uma função de admin ou uma regra mais complexa.


      // Permite que qualquer pessoa crie um novo usuário (registre-se)
      // desde que os dados necessários sejam fornecidos e o ID corresponda.
      // E o usuário não pode se auto-atribuir como admin durante a criação.
      allow create: if request.resource.data.id == userId &&
                       request.resource.data.name != null &&
                       request.resource.data.email != null &&
                       request.resource.data.password != null && // Lembre-se, armazenar senha assim é inseguro.
                       (request.resource.data.isAdmin == false || request.resource.data.isAdmin == null); // Não pode se auto-promover admin

      // Permitir leitura pública de alguns campos do perfil (ex: nome, bio, avatar)
      // Cuidado para não expor dados sensíveis como email aqui sem necessidade.
      // Para um sistema real com Firebase Auth, você usaria request.auth.uid para controlar o acesso
      // aos dados do próprio usuário.
      allow get: if true; // Para propósitos de visualização pública de perfil. Ajuste conforme necessário.
    }

    // Coleção de Acessórios (acessorios)
    match /acessorios/{accessoryId} {
      // Todos podem ler acessórios
      allow get, list: if true;

      // Apenas admins podem criar, deletar e sobrescrever (write) documentos de acessórios
      // A função isAdmin() aqui assume que request.auth não é nulo.
      allow create, delete, write: if isAdmin();

      // Usuários autenticados podem atualizar para curtir/descurtir ou adicionar comentários
      allow update: if request.auth != null &&
                      (
                        // Permitir adicionar/remover a si mesmo da lista de 'likedBy'
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy']) &&
                         (request.resource.data.likedBy.hasAny([request.auth.uid]) || resource.data.likedBy.hasAny([request.auth.uid]))
                        ) ||
                        // Permitir adicionar um novo comentário (não editar existentes ou mudar status)
                        // Novos comentários são enviados para moderação (pending_review)
                        (request.resource.data.comments.size() == resource.data.comments.size() + 1 &&
                         request.resource.data.comments[request.resource.data.comments.size() - 1].userId == request.auth.uid &&
                         (request.resource.data.comments[request.resource.data.comments.size() - 1].status == 'pending_review' ||
                          request.resource.data.comments[request.resource.data.comments.size() - 1].status == 'approved') && // Permite aprovação inicial ou direto pendente
                         // Garante que apenas o novo comentário está sendo adicionado e outros campos não
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['name', 'price', 'status']) // Exemplo de outros campos
                        ) ||
                        // Admin pode atualizar qualquer campo (incluindo status de comentários)
                        isAdmin()
                      );
    }

    // Coleção de Posts do Blog (posts)
    match /posts/{postId} {
      // Todos podem ler posts
      allow get, list: if true;
      // Apenas admins podem criar, atualizar e deletar posts
      allow create, update, delete: if isAdmin();
    }

    // Coleção de Cupons (cupons)
    match /cupons/{couponId} {
      // Todos podem ler cupons
      allow get, list: if true;
      // Apenas admins podem criar, atualizar e deletar cupons
      allow create, update, delete: if isAdmin();
    }

    // Configurações do Site (ex: um único documento 'global' em uma coleção 'siteConfig')
    match /siteConfig/{configId} {
        allow get: if true; // Todos podem ler
        allow write: if isAdmin(); // Apenas admin pode escrever
    }

    // Depoimentos (testimonials)
    match /testimonials/{testimonialId} {
        allow get, list: if true; // Todos podem ler
        allow create, update, delete: if isAdmin(); // Apenas admin gerencia
    }
  }
}
