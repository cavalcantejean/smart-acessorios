
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Função helper para verificar se o usuário é admin (usando dados do Firestore)
    // ATENÇÃO: Para produção robusta, use Custom Claims do Firebase Auth (request.auth.token.admin == true)
    // Esta função é mais um exemplo e pode ser custosa em termos de leituras.
    function isUserAdmin(userId) {
      return get(/databases/$(database)/documents/usuarios/$(userId)).data.isAdmin == true;
    }

    // Coleção de Usuários (usuarios)
    match /usuarios/{userId} {
      // Permite a criação do documento do usuário se:
      // 1. O UID do usuário autenticado (Firebase Auth) corresponde ao ID do documento que está sendo criado.
      // 2. O campo 'id' no documento é o mesmo que o UID do usuário autenticado.
      // 3. 'name' é uma string e não está vazio.
      // 4. 'email' no documento corresponde ao email do token de autenticação.
      // 5. 'isAdmin' é explicitamente 'false' OU não está presente nos dados (para evitar que o usuário se defina como admin).
      // 6. Apenas os campos permitidos estão sendo escritos.
      allow create: if request.auth.uid == userId &&
                       request.resource.data.id == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.email == request.auth.token.email &&
                       (request.resource.data.isAdmin == false || !('isAdmin' in request.resource.data)) &&
                       request.resource.data.keys().hasOnly(['id', 'name', 'email', 'isAdmin', 'followers', 'following', 'badges', 'createdAt', 'avatarUrl', 'avatarHint', 'bio']);

      // Permite leitura do perfil por qualquer usuário autenticado.
      allow read: if request.auth.uid != null;

      // Permite que o próprio usuário atualize seu perfil,
      // mas não permite que ele altere seu status de 'isAdmin' para true.
      // O status 'isAdmin' só pode ser alterado por um admin através de uma função de servidor ou diretamente no console.
      allow update: if request.auth.uid == userId &&
                       (!('isAdmin' in request.resource.data) || request.resource.data.isAdmin == resource.data.isAdmin || request.resource.data.isAdmin == false);

      // Permite que o próprio usuário delete sua conta.
      allow delete: if request.auth.uid == userId;
    }

    // Coleção de Acessórios (acessorios)
    match /acessorios/{accessoryId} {
      // Todos podem ler (get) e listar (list) acessórios.
      allow get, list: if true;

      // Apenas administradores (verificados via Custom Claim ou função de servidor segura, aqui simulado com isUserAdmin)
      // podem criar, deletar ou fazer escritas gerais (write abrange create, update, delete).
      allow create, delete, update: if request.auth.uid != null && isUserAdmin(request.auth.uid);
      // Para 'update', se for para adicionar comentários ou likes, as regras precisam ser mais granulares:
      // allow update: if request.auth.uid != null; // (Permitiria a qualquer usuário logado curtir/comentar)
      // Ou, de forma mais precisa, para campos específicos:
      // allow update: if request.auth.uid != null &&
      //                  request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy', 'comments']);
    }

    // Coleção de Posts do Blog (posts)
    match /posts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth.uid != null && isUserAdmin(request.auth.uid);
    }

    // Coleção de Cupons (cupons)
    match /cupons/{couponId} {
      allow get, list: if true;
      allow create, update, delete: if request.auth.uid != null && isUserAdmin(request.auth.uid);
    }

    // Configurações do Site (siteConfig)
    // Ex: um único documento chamado 'global'
    match /siteConfig/{configDocId} {
        allow get: if true;
        allow write: if request.auth.uid != null && isUserAdmin(request.auth.uid);
    }

    // Testimonials (depoimentos)
    match /testimonials/{testimonialId} {
        allow get, list: if true;
        // Administradores podem gerenciar depoimentos
        allow create, update, delete: if request.auth.uid != null && isUserAdmin(request.auth.uid);
    }
  }
}

    