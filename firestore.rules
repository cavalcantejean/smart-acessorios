
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Em um ambiente de produção, NUNCA confie em um campo 'isAdmin' no documento do usuário
      // para regras de segurança críticas sem proteção adicional (como Custom Claims via Firebase Auth).
      // Esta função é apenas para o contexto do mock data e da fase de desenvolvimento.
      // Para um sistema real, use Custom Claims: request.auth.token.admin == true
      // ou uma coleção separada de administradores.
      // Também é importante proteger o campo isAdmin de ser modificado por não-admins.
      return request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.isAdmin == true;
    }

    match /usuarios/{userId} {
      // REGRA DE CRIAÇÃO TEMPORARIAMENTE SIMPLIFICADA PARA DEPURAÇÃO:
      allow create: if request.resource.data.id == userId &&
                       request.resource.data.name != null &&
                       request.resource.data.email != null;
                       // As seguintes linhas foram temporariamente comentadas para teste:
                       // && request.resource.data.password != null 
                       // && (request.resource.data.isAdmin == false || request.resource.data.isAdmin == null);

      allow read, delete: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId &&
                       // Impede que um usuário se torne admin, a menos que já seja ou esteja sendo definido por um admin
                       (request.resource.data.isAdmin == resource.data.isAdmin || resource.data.isAdmin == true || isAdmin());
      
      allow get: if true; // Permite leitura pública de perfis (ajuste campos se necessário)
    }

    match /acessorios/{accessoryId} {
      allow get, list: if true;
      allow create, delete, write: if isAdmin(); // 'write' cobre 'create' e 'update' completos
      
      // Regra de update mais granular para usuários autenticados (não admins)
      allow update: if request.auth != null &&
                      (
                        // Permitir curtir/descurtir
                        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy']) &&
                           (request.resource.data.likedBy.hasAny([request.auth.uid]) || resource.data.likedBy.hasAny([request.auth.uid]))
                        ) ||
                        // Permitir adicionar um novo comentário (apenas 'pending_review')
                        (
                          resource.data.comments == null || // Se não houver comentários antes
                          request.resource.data.comments.size() == resource.data.comments.size() + 1 // Adicionando um novo
                        ) &&
                        request.resource.data.comments[request.resource.data.comments.size() - 1].userId == request.auth.uid &&
                        request.resource.data.comments[request.resource.data.comments.size() - 1].status == 'pending_review' &&
                        !('status' in request.resource.data.comments[request.resource.data.comments.size() - 1].keys()) // Usuário não pode definir status
                      );
    }

    match /posts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    match /cupons/{couponId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    match /siteConfig/{configId} {
        allow get: if true;
        allow write: if isAdmin();
    }

    match /testimonials/{testimonialId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }
  }
}
