
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to check if the user is the owner of the document
    // (typically used for user's own data)
    function isOwner(docUserId) {
      return request.auth != null && request.auth.uid == docUserId;
    }

    // Usuarios Collection
    match /usuarios/{userId} {
      allow read: if true; // Anyone can read user profiles

      allow create: if isOwner(userId) && // User can create their own profile document
                      request.resource.data.name is string &&
                      request.resource.data.email is string &&
                      request.resource.data.isAdmin == false && // New users are not admins by default
                      request.resource.data.followers is list && request.resource.data.followers.size() == 0 &&
                      request.resource.data.following is list && request.resource.data.following.size() == 0 &&
                      request.resource.data.badges is list && request.resource.data.badges.size() == 0 &&
                      (!('avatarUrl' in request.resource.data) || request.resource.data.avatarUrl is string) &&
                      (!('avatarHint' in request.resource.data) || request.resource.data.avatarHint is string) &&
                      (!('bio' in request.resource.data) || request.resource.data.bio is string) &&
                      request.resource.data.createdAt == request.time; // Must set createdAt to server time

      allow update: if
                      // User can update specific, non-sensitive fields of their own profile
                      (isOwner(userId) &&
                        request.writeFields.hasAny(['name', 'avatarUrl', 'avatarHint', 'bio', 'updatedAt']) &&
                        !request.writeFields.hasAny(['email', 'isAdmin', 'followers', 'following', 'badges', 'createdAt']) && // Cannot change these sensitive fields directly
                        request.resource.data.updatedAt == request.time
                       ) ||
                       // Admin can update user profiles (includes making another user admin)
                       (isAdmin() && request.resource.data.updatedAt == request.time);

      allow delete: if isAdmin(); // Only admins can delete user documents
    }

    // Acessorios Collection
    match /acessorios/{accessoryId} {
      allow read: if true; // Anyone can read accessories

      allow create: if isAdmin() &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time; // Admin creates, sets timestamps

      allow delete: if isAdmin(); // Only admins can delete

      allow update: if
        // Admins can update all fields (ensure updatedAt is also set)
        (isAdmin() && request.resource.data.updatedAt == request.time) ||
        // Authenticated users can update specific fields for likes/comments
        (request.auth != null &&
         request.resource.data.updatedAt == request.time && // User updates must also set updatedAt
          (
            // Liking/Unliking: Only 'likedBy' and 'updatedAt' can change
            (request.writeFields.toSet().hasOnly(['likedBy', 'updatedAt'])) ||
            // Commenting: Only 'comments' and 'updatedAt' can change
            // The client/server action is responsible for the content of the comment (e.g., userId, status)
            (request.writeFields.toSet().hasOnly(['comments', 'updatedAt']))
          )
        );
    }

    // Cupons Collection
    match /cupons/{couponId} {
      allow read: if true; // Anyone can read coupons
      allow create: if isAdmin() &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;
      allow update: if isAdmin() &&
                       request.resource.data.updatedAt == request.time;
      allow delete: if isAdmin();
    }

    // Posts Collection
    match /posts/{postId} {
      allow read: if true; // Anyone can read posts
      allow create: if isAdmin() &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.publishedAt is timestamp; // Ensure publishedAt is a timestamp
      allow update: if isAdmin() &&
                       request.resource.data.updatedAt == request.time &&
                       (!('publishedAt' in request.resource.data) || request.resource.data.publishedAt is timestamp);
      allow delete: if isAdmin();
    }
  }
}
